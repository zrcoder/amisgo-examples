// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
)

const addTodo = `-- name: AddTodo :one
INSERT INTO todos (title, priority, due_date, is_completed, created_at, updated_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, title, priority, due_date, is_completed, created_at, updated_at
`

type AddTodoParams struct {
	Title       string
	Priority    sql.NullInt64
	DueDate     sql.NullTime
	IsCompleted sql.NullBool
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, addTodo,
		arg.Title,
		arg.Priority,
		arg.DueDate,
		arg.IsCompleted,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Priority,
		&i.DueDate,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addTodoDetail = `-- name: AddTodoDetail :one
INSERT INTO todo_details (todo_id, detail, created_at, updated_at)
VALUES (?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, todo_id, detail, created_at, updated_at
`

type AddTodoDetailParams struct {
	TodoID int64
	Detail sql.NullString
}

func (q *Queries) AddTodoDetail(ctx context.Context, arg AddTodoDetailParams) (TodoDetail, error) {
	row := q.db.QueryRowContext(ctx, addTodoDetail, arg.TodoID, arg.Detail)
	var i TodoDetail
	err := row.Scan(
		&i.ID,
		&i.TodoID,
		&i.Detail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT todos.id, todos.title, todos.priority, todos.due_date, todos.is_completed, todos.created_at, todos.updated_at, todo_details.detail
FROM todos
LEFT JOIN todo_details ON todos.id = todo_details.todo_id
WHERE todos.id = ? LIMIT 1
`

type GetTodoRow struct {
	ID          int64
	Title       string
	Priority    sql.NullInt64
	DueDate     sql.NullTime
	IsCompleted sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Detail      sql.NullString
}

func (q *Queries) GetTodo(ctx context.Context, id int64) (GetTodoRow, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i GetTodoRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Priority,
		&i.DueDate,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Detail,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, priority, due_date, is_completed, created_at, updated_at FROM todos
ORDER BY updated_at
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Priority,
			&i.DueDate,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uodateTodoDetail = `-- name: UodateTodoDetail :exec
UPDATE todo_details
SET detail = ?, updated_at = CURRENT_TIMESTAMP
WHERE todo_id = ?
`

type UodateTodoDetailParams struct {
	Detail sql.NullString
	TodoID int64
}

func (q *Queries) UodateTodoDetail(ctx context.Context, arg UodateTodoDetailParams) error {
	_, err := q.db.ExecContext(ctx, uodateTodoDetail, arg.Detail, arg.TodoID)
	return err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title = ?, priority = ?, due_date = ?, is_completed = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateTodoParams struct {
	Title       string
	Priority    sql.NullInt64
	DueDate     sql.NullTime
	IsCompleted sql.NullBool
	ID          int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.Title,
		arg.Priority,
		arg.DueDate,
		arg.IsCompleted,
		arg.ID,
	)
	return err
}
